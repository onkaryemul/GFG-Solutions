//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

// Position this line where user code will be pasted.

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            int[] a = new int[n];

            for (int i = 0; i < n; i++) {
                a[i] = sc.nextInt();
            }

            int start = sc.nextInt();
            int end = sc.nextInt();

            Solution ob = new Solution();
            int ans = ob.minimumMultiplications(a, start, end);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


// User function Template for Java
class Solution {
    
    // where '100000' are total possible numbers generated by multiplication (hypothetical)
    
    // & N = size of the array with numbers of which each node could be multiplied
    
    // TC : O(100000 * N)
    // SC : O(100000 * N) => 100000 * N is the max possible queue size
    // space complexity of the dist[] => constant
    
    // Pair class
    class Pair {
        int a;
        int b;
        
        // constructor
        Pair(int a, int b) {
            this.a = a;
            this.b = b;
        }
    }

    
    // function to return minimum multiplications to reach End
    int minimumMultiplications(int[] arr, int start, int end) {
        // Your code here
        if(start == end) {
            return 0;
        }
        
        int[] visited = new int[100000];
         
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(0, start));
        
        while(q.size() > 0) {
            Pair p = q.remove();
            
            int steps = p.a;
            int num = p.b;
            
            for(int i=0; i<arr.length; i++) {
                long temp = arr[i] * num % 100000;
                int ns = (int)temp;
                
                if(ns == end) {
                    return steps+1;
                }
                
                if(visited[ns] == 0) {
                    q.add(new Pair(steps+1, ns));
                    visited[ns] = 1;
                }
            }
        }
        
        return -1;
    }
    
}


